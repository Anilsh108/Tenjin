name: Execute Test Run

on:
  push:
    branches:
      - main

jobs:
  test-run:
    runs-on: ['ubuntu-latest']

    env:
      IPADDR: 'https://yethi-test.tenjinonline.com'
      INSID: 'yethi-test'
      APITOKEN: 'BLtzOI16bfz42xtL1A8nUmM9eFGO/rwEIRSYK8vcgGl9ShmZN/0WM4Ja/nCKxWeZXVAmOk5WgVPZYr57uoDANzoM5lF/M/m1+t4/niCjadwAoS9/r/6WYMCLPPnzpjUeA4dBDd9NjeWg0hQEJJnS15Xt++fXXsSf/XJ0UNVEVj3NpHBOGSXwRrb3sniTHNs2AHQ3ssor9sw/wHYFqhMjN8FtIP1JdyWBABzXwmkKcF9jsEZPZyH23UGS60mEqWUd5V5LbnXi0VH2MyOG76ul51rIyQ/aRv1Sv/gDDfeFRaBNWYv991GU0NdeTjuSQGouNV6VGC4viKwPQ+dHdxhNjQ=='
      AGENTNAME: 'ponnar'
      INCLUDECLOUDDEVICE: 'false'
      INCLUDECLOUDBROWSER: 'false'
      # DEVICENAME: 
      PROJECTKEY: 'PTO1'
      BROWSER: 'chorme'
      REGION: 'UTC+05:30'
      TESTRUNID: 'Test-Run-12490532'
      ISCLOUDAGENT: 'false'
      BROWSERVERSION: '80.0'
      OS: 'Windows 8.1'
      # RUNONLYFAILED: ${{ secrets.RUNONLYFAILED }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Define end time
        id: define_end_time
        run: echo "::set-output name=end_time::$(date -d 'now + 1 hour' +'%s')"

      - name: Execute Test Run
        id: execute_test_run
        run: |
          EXECUTE=$(curl -s -k --request POST "$IPADDR/api/rest/1/execute/testrun" \
            --header 'Content-Type: application/json' \
            --header 'X-INS-ID: $INSID' \
            --header 'X-API-TOKEN: $APITOKEN' \
            --data-raw '{
              "agentName": "$AGENTNAME",
              "includeCloudDevice": "$INCLUDECLOUDDEVICE",
              "includeCloudBrowser": "$INCLUDECLOUDBROWSER",
              "device": "$DEVICENAME",
              "projectKey": "$PROJECTKEY",
              "browser": "$BROWSER",
              "region": "$REGION",
              "testRunId": "$TESTRUNID",
              "cloudAgent": "$ISCLOUDAGENT",
              "browserVersion": "$BROWSERVERSION",
              "os": "$OS",
              "reRunFailedCases": "$RUNONLYFAILED"
            }')
          echo "EXECUTE: $EXECUTE"       
          value=$(echo $EXECUTE | jq -r '.testRunId')
          echo "Test Run ID: $value" 

      - name: Monitor Test Run
        run: |
          status=''
          agentstatus=''
          response=''
          result=''
          count=0
          end_time=$(($(date +%s) + 3600)) # One hour timeout
          while [[ $status != 'COMPLETED' && $agentstatus != 'TERMINATED' && $agentstatus != 'ERROR' && $(date +%s) -lt $end_time ]]; do
              response=$(curl -s -k --request GET "$IPADDR/api/rest/1/testruns/$value/runstatus" \
                --header 'Content-Type: application/json' \
                --header "X-INS-ID: $INSID" \
                --header "X-API-TOKEN: $APITOKEN")
              status=$(echo $response | jq -r '.status')
              result=$(echo $response | jq -r '.result')
              agentstatus=$(echo $response | jq -r '.cloudAgentStatus')
              echo "inloop status $response \n $status"
              sleep 20
              count=$((count+1))
              if [[ $result == 'FAIL' || $status == 'null' ]]; then
                  echo "Result status is $result"
                  exit 1
              else
                  echo "Result status is $result"
              fi
          done

has context menu

  # # Handle post-aborted stage
  # post-aborted:
  #   runs-on: ['ubuntu-latest']

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Read test run ID from file
  #       id: read_test_run_id
  #       run: |
  #         if [ -f value.txt ]; then
  #           TEST_RUN_ID=$(cat value.txt)
  #           echo "::set-output name=test_run_id::$TEST_RUN_ID"
  #         fi
 
  #     - name: Abort test run
  #       if: ${{ always() && steps.read_test_run_id.outputs.test_run_id != '' }}
  #       run: |
  #         curl -s -k --request PUT "$IPADDR/api/rest/1/abortrun/${{ steps.read_test_run_id.outputs.test_run_id }}" \
  #           --header 'Content-Type: application/json' \
  #           --header 'X-INS-ID: $INSID' \
  #           --header 'X-API-TOKEN: $APITOKEN"
  #         rm -rf value.txt
